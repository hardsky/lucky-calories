---
swagger: "2.0"
info:
  description: "Know your calories"
  version: "1.0.0"
  title: "Lucky Calories API"
host: "localhost:4003"
basePath: "/api/v1"
schemes:
- "http"
consumes:
- "application/json"
produces:
- "application/json"
paths:
  /login:
    post:
      description: "Authorize user.\n"
      operationId: "login"
      parameters:
      - in: "body"
        name: "info"
        description: "User login info in JSON format."
        required: true
        schema:
          $ref: "#/definitions/LoginInfo"
      responses:
        200:
          description: "Access token and user info."
          schema:
            $ref: "#/definitions/AuthInfo"
        403:
          description: "Access denied."
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Default"
  /signup:
    post:
      description: "Register new user.\n"
      operationId: "signup"
      parameters:
      - in: "body"
        name: "info"
        description: "User registration info in JSON format."
        required: true
        schema:
          $ref: "#/definitions/SignUpInfo"
      responses:
        200:
          description: "Access token and user info for new user."
          schema:
            $ref: "#/definitions/AuthInfo"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Default"
  /user/{id}/calories:
    get:
      description: "Get paged calories list for user.\nPaged by 100 meals.\nOrdered\
        \ by eat time (from now to past (closest to current time is first in list)).\n"
      operationId: "getUserCaloriesList"
      parameters:
      - name: "id"
        in: "path"
        description: "user Id"
        required: true
        type: "integer"
        format: "int64"
      - name: "last"
        in: "query"
        description: "eat time of last meal from previous page"
        required: false
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Callorie list (page)."
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Calorie"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      security:
      - access_token: []
      x-swagger-router-controller: "Default"
    post:
      description: "Add new item to calories list for user.\n"
      operationId: "createUserCalorie"
      parameters:
      - name: "id"
        in: "path"
        description: "user Id"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "calorie"
        description: "Add calorie item to list"
        required: true
        schema:
          $ref: "#/definitions/Calorie"
      responses:
        200:
          description: "New calorie entry in list for user."
          schema:
            $ref: "#/definitions/Calorie"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      security:
      - access_token: []
      x-swagger-router-controller: "Default"
    put:
      description: "Update item in calories list for user.\n"
      operationId: "updateUserCalorie"
      parameters:
      - name: "id"
        in: "path"
        description: "user Id"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "calorie"
        description: "Changed calorie item"
        required: true
        schema:
          $ref: "#/definitions/Calorie"
      responses:
        200:
          description: "Updated calorie entry from list."
          schema:
            $ref: "#/definitions/Calorie"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      security:
      - access_token: []
      x-swagger-router-controller: "Default"
  /user/{id}/calories/filter:
    get:
      description: "Get paged calories list for user.\nPaged by 100 meals.\nOrdered\
        \ by eat time (from now to past (closest to current time is first in list)).\n\
        With applied filter by dates from-to, time from-to \n(e.g. how much calories\
        \ have I had for lunch each day in the last month, if lunch is between 12\
        \ and 15h).\n"
      operationId: "getUserCaloriesFilter"
      parameters:
      - name: "id"
        in: "path"
        description: "user Id"
        required: true
        type: "integer"
        format: "int64"
      - name: "last"
        in: "query"
        description: "eat time of last meal from previous page"
        required: false
        type: "integer"
        format: "int64"
      - name: "fromDate"
        in: "query"
        required: false
        type: "integer"
        format: "int64"
      - name: "toDate"
        in: "query"
        required: false
        type: "integer"
        format: "int64"
      - name: "fromTime"
        in: "query"
        required: false
        type: "integer"
        format: "int64"
      - name: "toTime"
        in: "query"
        required: false
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Callorie list (page)."
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Calorie"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      security:
      - access_token: []
      x-swagger-router-controller: "Default"
  /user/{id}/calories/{calorieId}:
    delete:
      description: "Delete entry from calories list for user.\n"
      operationId: "deleteUserCalorie"
      parameters:
      - name: "id"
        in: "path"
        description: "user Id"
        required: true
        type: "integer"
        format: "int64"
      - name: "calorieId"
        in: "path"
        description: "entry Id in calorie list"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Ok"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      security:
      - access_token: []
      x-swagger-router-controller: "Default"
  /users:
    get:
      description: "Get user list.\nPaged by 100 users.\nOrdered by alphabeticaly.\n"
      operationId: "getUserList"
      parameters:
      - name: "last"
        in: "query"
        description: "last name form user list"
        required: false
        type: "string"
      responses:
        200:
          description: "List of users."
          schema:
            type: "array"
            items:
              $ref: "#/definitions/User"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      security:
      - access_token: []
      x-swagger-router-controller: "Default"
    post:
      description: "Create new user.\n"
      operationId: "createUser"
      parameters:
      - in: "body"
        name: "user"
        description: "user info"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        200:
          description: "New user info."
          schema:
            $ref: "#/definitions/User"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      security:
      - access_token: []
      x-swagger-router-controller: "Default"
    put:
      description: "Update user info.\n"
      operationId: "updateUser"
      parameters:
      - in: "body"
        name: "user"
        description: "user info"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        200:
          description: "Updated user info."
          schema:
            $ref: "#/definitions/User"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      security:
      - access_token: []
      x-swagger-router-controller: "Default"
  /users/{id}:
    get:
      description: "Get user info.\n"
      operationId: "getUser"
      parameters:
      - name: "id"
        in: "path"
        description: "user Id"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "User info"
          schema:
            $ref: "#/definitions/User"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      security:
      - access_token: []
      x-swagger-router-controller: "Default"
    delete:
      description: "Delete user.\n"
      operationId: "deleteUser"
      parameters:
      - name: "id"
        in: "path"
        description: "user Id"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Ok"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      security:
      - access_token: []
      x-swagger-router-controller: "Default"
securityDefinitions:
  access_token:
    type: "apiKey"
    name: "access_token"
    in: "header"
definitions:
  Error:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int32"
      message:
        type: "string"
  LoginInfo:
    type: "object"
    properties:
      email:
        type: "string"
      password:
        type: "string"
        format: "password"
  SignUpInfo:
    type: "object"
    properties:
      name:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
  Calorie:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      meal:
        type: "string"
      note:
        type: "string"
      amount:
        type: "number"
        format: "float"
        description: "Value in kcal"
      eatTime:
        type: "integer"
        format: "int64"
  User:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
      email:
        type: "string"
      dailyCalories:
        type: "number"
        format: "float"
      userType:
        type: "integer"
        format: "int32"
        description: "user, manager, admin  \nUser - would only be able to CRUD on\
          \ his owned records.  \nManager - same as User + would able to CRUD users\
          \  \nAdmin - same as Manager + would able to CRUD everything;  \nUser ==\
          \ 1;\nManager == 2;\nAdmin == 3;\n"
  AuthInfo:
    type: "object"
    properties:
      accessToken:
        type: "string"
      user:
        $ref: "#/definitions/User"
