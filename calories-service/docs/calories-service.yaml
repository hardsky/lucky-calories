
swagger: '2.0'

# This is your document metadata
info:
  version: "1.0.0"
  title: Lucky Calories API
  description: Know your calories
host: localhost:4003
basePath: /api/v1
schemes:
  - http
produces:
  - application/json
consumes:
  - application/json
  
securityDefinitions:
  access_token:
    type: apiKey
    name: access_token
    in: header
security:
  - access_token: []

# Describe your paths here
paths:
  /login:
    post:
      description: |
        Authorize user.
      operationId: login
      parameters:
        - name: info
          in: body
          description: User login info in JSON format.
          schema:
            $ref: '#/definitions/LoginInfo'
          required: true
      responses:
        200:
          description: Access token and user info.
          schema:
            $ref: "#/definitions/AuthInfo"
        403:
          description: Access denied.
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'

  /signup:
    post:
      description: |
        Register new user.
      operationId: signup
      parameters:
        - name: info
          in: body
          description: User registration info in JSON format.
          schema:
            $ref: '#/definitions/SignUpInfo'
          required: true
      responses:
        200:
          description: Access token and user info for new user.
          schema:
            $ref: "#/definitions/AuthInfo"
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'

  /user/{id}/calories:
    get:
      description: |
        Get paged calories list for user.
        Paged by 100 meals.
        Ordered by eat time (from now to past (closest to current time is first in list)).
      operationId: getUserCaloriesList
      parameters:
        - name: id
          in: path
          description: user Id
          type: integer
          format: int64
          required: true
        - name: last
          in: query
          description: eat time of last meal from previous page
          type: integer
          format: int64
      responses:
        200:
          description: Callorie list (page).
          schema:
            type: array
            items:
              $ref: "#/definitions/Calorie"
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
      security:
        - access_token: []
    post:
      description: |
        Add new item to calories list for user.
      operationId: createUserCalorie
      parameters:
        - name: id
          in: path
          description: user Id
          type: integer
          format: int64
          required: true
        - name: calorie
          in: body
          description: Add calorie item to list
          required: true
          schema:
            $ref: "#/definitions/Calorie"
      responses:
        200:
          description: New calorie entry in list for user.
          schema:
            $ref: '#/definitions/Calorie'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
      security:
        - access_token: []
    put:
      description: |
        Update item in calories list for user.
      operationId: updateUserCalorie
      parameters:
        - name: id
          in: path
          description: user Id
          type: integer
          format: int64
          required: true
        - name: calorie
          in: body
          description: Changed calorie item
          required: true
          schema:
            $ref: "#/definitions/Calorie"
      responses:
        200:
          description: Updated calorie entry from list.
          schema:
            $ref: '#/definitions/Calorie'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
      security:
        - access_token: []

  /user/{id}/calories/filter:
    get:
      description: |
        Get paged calories list for user.
        Paged by 100 meals.
        Ordered by eat time (from now to past (closest to current time is first in list)).
        With applied filter by dates from-to, time from-to 
        (e.g. how much calories have I had for lunch each day in the last month, if lunch is between 12 and 15h).
      operationId: getUserCaloriesFilter
      parameters:
        - name: id
          in: path
          description: user Id
          type: integer
          format: int64
          required: true
        - name: last
          in: query
          description: eat time of last meal from previous page
          type: integer
          format: int64
        - name: fromDate
          in: query
          type: integer
          format: int64
        - name: toDate
          in: query
          type: integer
          format: int64
        - name: fromTime
          in: query
          type: integer
          format: int64
        - name: toTime
          in: query
          type: integer
          format: int64
      responses:
        200:
          description: Callorie list (page).
          schema:
            type: array
            items:
              $ref: "#/definitions/Calorie"
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
      security:
        - access_token: []

  /user/{id}/calories/{calorieId}:
    delete:
      description: |
        Delete entry from calories list for user.
      operationId: deleteUserCalorie
      parameters:
        - name: id
          in: path
          description: user Id
          type: integer
          format: int64
          required: true
        - name: calorieId
          in: path
          description: entry Id in calorie list
          type: integer
          format: int64
          required: true
      responses:
        200:
          description: Ok
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
      security:
        - access_token: []

  /users:
    get:
      description: |
        Get user list.
        Paged by 100 users.
        Ordered by alphabeticaly.
      operationId: getUserList
      parameters:
        - name: last
          in: query
          description: last name form user list
          type: string
      responses:
        200:
          description: List of users.
          schema:
            type: array
            items:
              $ref: "#/definitions/User"
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
      security:
        - access_token: []
    post:
      description: |
        Create new user.
      operationId: createUser
      parameters:
        - name: user
          in: body
          description: user info
          required: true
          schema:
            $ref: "#/definitions/User"
      responses:
        200:
          description: New user info.
          schema:
            $ref: "#/definitions/User"
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
      security:
        - access_token: []
    put:
      description: |
        Update user info.
      operationId: updateUser
      parameters:
        - name: user
          in: body
          description: user info
          required: true
          schema:
            $ref: "#/definitions/User"
      responses:
        200:
          description: Updated user info.
          schema:
            $ref: "#/definitions/User"
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
      security:
        - access_token: []
            
  /users/{id}:
    get:
      description: |
        Get user info.
      operationId: getUser
      parameters:
        - name: id
          in: path
          description: user Id
          type: integer
          format: int64
          required: true
      responses:
        200:
          description: User info
          schema:
            $ref: '#/definitions/User'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
      security:
        - access_token: []
    delete:
      description: |
        Delete user.
      operationId: deleteUser
      parameters:
        - name: id
          in: path
          description: user Id
          type: integer
          format: int64
          required: true
      responses:
        200:
          description: Ok
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
      security:
        - access_token: []

definitions:
  Error:
    type: object
    properties:
      code:
        type: integer
        format: int32
      message:
        type: string

  LoginInfo:
    type: object
    properties:
      email:
        type: string
      password:
        type: string
        format: password
        
  SignUpInfo:
    type: object
    properties:
      name:
        type: string
      email:
        type: string
      password:
        type: string
  
  Calorie:
    type: object
    properties:
      id:
        type: integer
        format: int64
      meal:
        type: string
      note:
        type: string
      amount:
        description: Value in kcal 
        type: integer
        format: int32
      eatTime:
        type: integer
        format: int64

  User:
    type: object
    properties:
      id:
        type: integer
        format: int64
      name:
        type: string
      email:
        type: string
      dailyCalories:
        description: Daily calories limit
        type: integer
        format: int32
      userType:
        type: integer
        format: int32
        description: |
          user, manager, admin  
          User - would only be able to CRUD on his owned records.  
          Manager - same as User + would able to CRUD users  
          Admin - same as Manager + would able to CRUD everything;  
          User == 1;
          Manager == 2;
          Admin == 3;
          
  AuthInfo:
    type: object
    properties:
      accessToken:
        type: string
      user:
        $ref: "#/definitions/User"
